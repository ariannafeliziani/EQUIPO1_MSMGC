!pip install mesa

from mesa import Agent, Model
from mesa.space import MultiGrid
from mesa.time import RandomActivation
from mesa.datacollection import DataCollector
from matplotlib.colors import ListedColormap

%matplotlib inline
import matplotlib
import matplotlib.pyplot as plt
import matplotlib.animation as animation

plt.rcParams["animation.html"] = 'jshtml'
matplotlib.rcParams['animation.embed_limit'] = 2**128

import numpy as np
import pandas as pd
import time
import datetime

def get_grid(model):
  grid = np.zeros((model.grid.width, model.grid.height))
  for cell in model.grid.coord_iter():
    cell_content, cell_pos = cell
    if len(cell_content) != 0:

          """
          agent = cell_content[0]  # Accede al primer agente en la lista
          print("cell content: ")
          print(agent)
          print(agent.dirt)

          """

          if hasattr(cell_content[0], 'maiz'):
            agent = cell_content[0]
            grid[cell_pos[0], cell_pos[1]] = agent.maiz

          if hasattr(cell_content[0], 'tractor'):
            agent = cell_content[0]
            grid[cell_pos[0], cell_pos[1]] = agent.tractor

  return grid

class MaizAgent(Agent):
  def __init__(self, unique_id, model):
    super().__init__(unique_id, model)
    self.maiz = 1

  def __del__(self):
    print(f"cell {self.pos} is harvested")

  def step(self):
    pass

class TractorAgent(Agent):
  def __init__(self, unique_id, model):
    super().__init__(unique_id, model)
    self.next_step = None
    self.tractor = 2
    self.number_of_steps = 0

  def move(self):
    neighbors = self.model.grid.get_neighborhood(
        self.pos,
        moore = True,
        include_center = False
    )

    open_positions = [pos for pos in neighbors if not
                      any(isinstance(agent, TractorAgent)
                      for agent in self.model.grid.get_cell_list_contents(pos))]
    if open_positions:
      self.next_step = open_positions[(np.random.randint(len(open_positions)))]
      self.model.grid.move_agent(self, self.next_step)
      self.number_of_steps += 1

  def harvest(self):
    cellmates = self.model.grid.get_cell_list_contents([self.pos])
    for agent in cellmates:
      if type(agent) is MaizAgent:
        agent.maiz = 0
        del agent

  def step(self):
    self.move()
    self.harvest()

class HarvestModel(Model):

  def __init__(self, T, M, width, height):
    self.num_tractors = T
    self.num_maiz = M
    self.grid = MultiGrid(width, height, False)
    self.schedule = RandomActivation(self)
    self.total_maiz = 0

    for i in range(self.num_maiz):
      m = MaizAgent(i, self)
      self.schedule.add(m)

      x = self.random.randrange(self.grid.width)
      y = self.random.randrange(self.grid.height)

      self.grid.place_agent(m, (x,y))

    start = self.num_maiz + 1
    finish = self.num_tractors + start


    for i in range(start, finish):
      t = TractorAgent(i, self)
      self.schedule.add(t)
      self.grid.place_agent(t, (0,0))

    self.datacollector = DataCollector(model_reporters = {'Grid': get_grid})


  def maiz_counter(self):
    maiz_left = 0
    for cell in model.grid.coord_iter():
      cell_content, cell_pos = cell
      if len(cell_content) != 0:
        if hasattr(cell_content[0], 'maiz'):
          agent = cell_content[0]
          if agent.maiz == 1:
            maiz_left += 1
    return maiz_left

  def step(self):
    self.datacollector.collect(self)
    self.schedule.step()
    self.maiz_left_total = self.maiz_counter()

GRID_SIZE = 10
num_tractors = 1
num_dirt = 100
num_generations = 500
num_steps = 0

start_time = time.time()
model = HarvestModel(num_tractors, num_dirt, GRID_SIZE, GRID_SIZE)
for i in range(num_generations):
  model.step()
  if (i == (num_generations - 1)):
    for cell in model.grid.coord_iter():
      cell_content, cell_pos = cell
      if len(cell_content) != 0:
        if hasattr(cell_content[0], 'quantity_of_steps'):
          agent = cell_content[0]
          num_steps += agent.quantity_of_steps

print(f"total number of steps: {num_steps - num_tractors}")
print(f"Execution time: ", str(datetime.timedelta(seconds = (time.time() - start_time))))


all_grid = model.datacollector.get_model_vars_dataframe()
final_maiz_left = model.maiz_left_total

print(f"total maiz left: {final_maiz_left}")

fig, axis = plt.subplots(figsize = (5,5))
axis.set_xticks([])
axis.set_yticks([])

colors = [(1, 1, 1),  # Blanco
          (0, 0.4, 0),  # Verde
          (0.5, 0, 0)]  # Azul

cmap_custom = ListedColormap(colors)
patch = plt.imshow(all_grid.iloc[0][0], cmap = cmap_custom)

prev_lines = []

def animate(i):
  global prev_lines
  for line in prev_lines:
    line.remove()
  prev_lines.clear()

  patch.set_data(all_grid.iloc[i][0])

  for x in range(GRID_SIZE + 1):
    for y in range(GRID_SIZE + 1):
      h_line, = axis.plot([-0.5, GRID_SIZE - 0.5], [y - 0.5, y - 0.5], color = 'gray', linestyle = "-", linewidth = 0.5)
      v_line, = axis.plot([x - 0.5, x - 0.5], [-0.5, GRID_SIZE - 0.5], color = "gray", linestyle = "-", linewidth = 0.5)
      prev_lines.extend([h_line, v_line])


anim = animation.FuncAnimation(fig, animate, frames = num_generations)
anim
